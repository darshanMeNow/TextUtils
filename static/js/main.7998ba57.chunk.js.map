{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","onClick","toggleMode","role","htmlFor","defaultProps","TextForm","useState","text","setText","style","color","heading","value","backgroundColor","onChange","event","target","rows","newUpperText","toUpperCase","showAlert","newLowerText","toLowerCase","split","length","Alert","alert","message","App","setMode","setAlert","setTimeout","aboutText","document","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.7998ba57.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n// import {\r\n//     Link\r\n//   } from \"react-router-dom\";\r\n\r\nfunction Navbar(props) {\r\n    return (\r\n                \r\n                <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n                <div className=\"container-fluid\">\r\n                <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n                <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                    <span className=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                    <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                        <li className=\"nav-item\">\r\n                            <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n                        </li>\r\n                        {/* <li className=\"nav-item\">\r\n                            <Link className=\"nav-link\" to=\"/about\">{props.aboutText}</Link>\r\n                        </li> */}\r\n                    </ul>\r\n                    {/* <form className=\"d-flex\">\r\n                    <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n                    <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\r\n                    </form> */}\r\n                    <div className={`form-check form-switch-text-${props.mode==='light'?'dark':'light'}`}>\r\n                        <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n                        <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable Dark Mode</label>\r\n                    </div>\r\n                </div>\r\n                </div>\r\n            </nav>\r\n            \r\n    );\r\n}\r\n//propTypes is for type of the property i.e. is it string or number ..basically a check\r\nNavbar.propTypes={\r\n    title:PropTypes.string.isRequired,\r\n    aboutText:PropTypes.string\r\n}\r\n//this defaultProps is for by default value if i forgot to pass the value\r\nNavbar.defaultProps={\r\n    title:'Set Title Here'\r\n};\r\nexport default Navbar\r\n","import React, { useState } from 'react'\r\n\r\nexport default function TextForm(props) {\r\n\r\n    const [text,setText]=useState('')//this is react hook state for text\r\n\r\n    const handleUpClick=()=>{\r\n        //console.log(\"Uppercase was clicked\")\r\n        let newUpperText=text.toUpperCase()\r\n        setText(newUpperText)//this  is how text is changed in react ..you cant do text=\"dfd\"\r\n        props.showAlert(\"Converted to Uppercase\",\"success\");\r\n        \r\n    }\r\n\r\n    const handleLoClick=()=>{\r\n        //console.log(\"Uppercase was clicked\")\r\n        let newLowerText=text.toLowerCase()\r\n        setText(newLowerText)\r\n        props.showAlert(\"Converted to Lowercase\",\"success\");\r\n        \r\n    }\r\n\r\n    const handleOnChange=(event)=>{\r\n        //console.log(\"On Change\");\r\n        setText(event.target.value);\r\n    }\r\n    \r\n    \r\n    return (\r\n        <>\r\n        <div className=\"container\" style={{color:props.mode==='dark'?'white':'black'}}>\r\n            <h1>{props.heading}</h1>\r\n            <div className=\"mb-3\">\r\n            <textarea className=\"form-control\" id=\"myBox\" value={text} style={{backgroundColor:props.mode==='dark'?'grey':'white',color:props.mode==='dark'?'white':'black'}} onChange={handleOnChange} rows=\"8\"></textarea>\r\n            </div>\r\n            <button className=\"btn btn-primary mx-2\" onClick={handleUpClick}>Convert to Uppercase</button>\r\n            <button className=\"btn btn-primary mx-2\" onClick={handleLoClick}>Convert to Lowercase</button>\r\n        </div>\r\n        <div className=\"container my-3\" style={{color:props.mode==='dark'?'white':'black'}}>\r\n            <h2>Your Text Summary</h2>\r\n            <p>Total {text.split(\" \").length} words and {text.length} characters</p>\r\n            <p>{0.008* text.split(\" \").length} minutes to Read</p>\r\n            <h2>Preview</h2>\r\n            <p>{text.length>0?text:\"Enter something in textbox to preview here\"}</p>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n    return (\r\n        \r\n            props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n                <strong>{props.alert.type}</strong>: {props.alert.message}\r\n                \r\n            </div>\r\n        \r\n        \r\n    )\r\n}\r\n","import './App.css';\n// import About from './components/About';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport React, { useState } from 'react'\nimport Alert from './components/Alert';\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route,\n// } from \"react-router-dom\";\n\n//let name=\"Darshan\";\nfunction App() {\n  const [mode,setMode]=useState('light');//toggle for dark/light\n  const [alert,setAlert]=useState(null);\n  const showAlert=(message,type)=>{\n      setAlert({\n          message:message,\n          type:type\n      })\n      setTimeout( ()=>{\n          setAlert(null)\n      },900);\n  }\n  const toggleMode= ()=>{\n      if(mode==='light'){\n          setMode('dark')\n          document.body.style.backgroundColor='black'\n          showAlert(\"Dark Mode Enabled\",\"success\");\n          document.title='TextUtils [Dark] - Home';\n      }\n      else{\n        setMode('light')\n        document.body.style.backgroundColor='white'\n        showAlert(\"Light Mode Enabled\",\"success\");\n        document.title='TextUtils [Light] - Home';\n        \n      }\n  }\n  return (\n    <>\n      {/* <Router> */}\n      <Navbar title=\"TextUtils\" aboutText=\"About\"  mode={mode} toggleMode={toggleMode} />\n      {/* this is navabr component */}\n      <Alert alert={alert}/>\n      <div className=\"container my-3\">\n        <TextForm heading=\"Enter The Text To Analyze Below\" mode={mode} showAlert={showAlert}/>\n          {/* <Switch>\n              <Route exact path=\"/about\">\n                <About/>\n              </Route>\n          \n              <Route exact path=\"/\">\n              \n              </Route>\n            </Switch> */}\n      </div>\n      {/* </Router> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}